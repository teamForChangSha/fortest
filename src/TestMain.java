import java.rmi.RemoteException;

import javax.xml.rpc.ServiceException;

import com.cattsoft.fcconnector.service.FCService;
import com.cattsoft.fcconnector.service.FCServiceImplServiceLocator;
import com.cattsoft.fcconnector.service.FcFatalResultBean;
import com.cattsoft.fcconnector.service.FcQueryBean;
import com.cattsoft.fcconnector.service.PersonBean;
import com.cattsoft.fcconnector.service.PersonPicBean;

public class TestMain {
	private FCService binding = null;
	private String userID = null;

	public TestMain() throws ServiceException {
		binding = new FCServiceImplServiceLocator().getFCServiceImplPort();
	}

	public void testHasPerson() throws RemoteException {
		System.out.println("call has person: " + binding.hasPerson("3211820200036066"));
		// System.out.println(dao.hasPerson("JSL013731325",
		// "321324198302010052"));
	}

	public void testCreatePerson() throws RemoteException {
		PersonBean person = new PersonBean();
		person.setBirthday("1999-2-20");
		person.setGroupID("4F9782C0C41C4004A645CB07F727ECF3");
		person.setIdCard("430101199902201011");
		person.setName("daniel");
		person.setPhone1("13312345678");
		person.setPicCount(0);
		person.setRecCount(0);
		person.setSex("男");
		person.setSsid(null);
		person.setTimestp("2015-7-2");
		person.setAacID("2000000000987654");
		String id = binding.createPerson(person);
		this.userID = id;
		System.out.println("call create person : " + id);
	}

	public void testUpatePerson() throws RemoteException {
		PersonBean person = new PersonBean();
		person.setId(this.userID);
		person.setBirthday("1999-2-20");
		person.setGroupID("27F138CF3369471bB7E70A9D8D947A6E");
		person.setIdCard("430101199902201011");
		person.setName("pan");
		person.setPhone1("13312345678");
		person.setPicCount(0);
		person.setRecCount(0);
		person.setSex("男");
		person.setSsid(null);
		person.setTimestp("2015-7-2");
		String flag = binding.updatePerson(person);
		System.out.println("call update person :" + flag);
	}

	public void testGetFatalResultsList() throws RemoteException {
		FcQueryBean query = new FcQueryBean();
		query.setEndTime("2015-7-20");
		query.setStartTime("2015-6-15");
		// query.setPfType("001001");
		PersonBean person = new PersonBean();
		person.setIdCard("430");
		// query.setPerson(person);

		FcFatalResultBean[] list = binding.getFatalResultsList(query);

		System.out.println("call get fatal results list : " + list.length);
	}

	public void testGetResultsList() throws RemoteException {
		FcQueryBean query = new FcQueryBean();
		query.setEndTime("2015-7-20");
		query.setStartTime("2015-6-15");
		// query.setPfType("001001");
		PersonBean person = new PersonBean();
		person.setIdCard("430");
		// query.setPerson(person);

		FcFatalResultBean[] list = binding.getResultsList(query);

		System.out.println("call get fatal results list : " + list.length);
	}

	public void testAddPersonPicture() throws RemoteException {
		String picStr = "";
		PersonPicBean pic = new PersonPicBean();
		pic.setGroupID("4F9782C0C41C4004A645CB07F727ECF3");
		pic.setPersonSSID("2111111111987654");
		pic.setPicture(picStr);
		pic.setTimestp("2015-6-30");
		String id = binding.addPersonFacePic(pic);
		System.out.println("picture created " + id);
		System.out.println("call add person picture done!");
	}

	public static void main(String[] args) {
		try {
			TestMain tm = new TestMain();
			tm.testHasPerson();
			// tm.testAddPersonPicture();
			// tm.testCreatePerson();
			// tm.testGetResultsList();
			// tm.testUpatePerson();
			// tm.testGetFatalResultsList();
		} catch (ServiceException e) {
			e.printStackTrace();
		} catch (RemoteException e) {
			e.printStackTrace();
		}
	}

}
